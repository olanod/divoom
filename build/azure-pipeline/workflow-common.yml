parameters:
  - name: buildVersionMajor
    type: string
    default: 0
  - name: buildVersionMinor
    type: string
    default: 0
  - name: buildVersionRevision
    type: string
    default: 0
  - name: isPRWorkflow
    type: boolean
    default: false

stages:
  - stage: Build
    jobs:
      - job: Build
        #
        # Build flavors
        #
        strategy:
          matrix:
            windows-x86:
              poolName: Azure Pipelines
              imageName: 'windows-latest'
              target_os: windows
              target_arch: x86
              is_cross_compile: true
            windows-x64:
              poolName: Azure Pipelines
              imageName: 'windows-latest'
              target_os: windows
              target_arch: x86_64
              is_cross_compile: false
            windows-arm64:
              poolName: Azure Pipelines
              imageName: 'windows-latest'
              target_os: windows
              target_arch: aarch64
              is_cross_compile: true
            linux-x86:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: x86
              is_cross_compile: true
            linux-x64:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: x86_64
              is_cross_compile: false
            linux-arm:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: arm
              is_cross_compile: true
            linux-arm64:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: aarch64
              is_cross_compile: true
            macos-x64:
              poolName: Azure Pipelines
              imageName: 'macos-latest'
              target_os: macos
              target_arch: x86_64
              is_cross_compile: false

        pool:
          name: $(poolName)
          vmImage: $(imageName)

        workspace:
          clean: all

        steps:
          #
          # Force cleanup.
          # Self-hosted agents must be cleaned up, otherwise it might carry the previous result to the latest build.
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/pipeline-options-for-git?view=azure-devops&tabs=yaml#clean-the-local-repo-on-the-agent
          #
          - checkout: self
            clean: true

          #
          # Environment variable updates
          #
          - bash: |
              BUILD_VERSION=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)
              echo "##vso[task.setvariable variable=Build.Version]$BUILD_VERSION"
              echo "Updated Build.Version to $BUILD_VERSION"

              BUILD_BRANCH="$(Build.SourceBranch)"
              BUILD_BRANCH=${BUILD_BRANCH#refs/heads/}
              BUILD_BRANCH=${BUILD_BRANCH#refs/tags/}
              BUILD_BRANCH=${BUILD_BRANCH//\//_}
              BUILD_BRANCH=${BUILD_BRANCH//-//_}
              BUILD_BRANCH=${BUILD_BRANCH// //_}
              echo "##vso[task.setvariable variable=Build.BranchName]$BUILD_BRANCH"
              echo "Updated Build.BranchName to $BUILD_BRANCH"
            displayName: Update build environment variables

          #
          # Update build environment
          #
          - bash: |
              rustup default stable
              rustup update stable
            displayName: rustup update default toolchain

          - script: choco install just -y
            displayName: Install make tool on Windows
            condition: and(succeeded(), eq(variables['target_os'], 'windows'))


          - bash: |
              curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
            displayName: Install cargo make binary on Linux/MAC
            condition: and(succeeded(), ne(variables['target_os'], 'windows'))

          #
          # Install build tools
          #
          - script: just init-win
            displayName: Install build tools on windows
            condition: and(succeeded(), eq(variables['target_os'], 'windows'))
            env:
              BUILD_TARGET: $(target_arch)

          - script: just init-linux
            displayName: Install build tools on linux
            condition: and(succeeded(), eq(variables['target_os'], 'linux'))
            env:
              BUILD_TARGET: $(target_arch)

          - script: just init-mac
            displayName: Install build tools on macos
            condition: and(succeeded(), eq(variables['target_os'], 'macos'))
            env:
              BUILD_TARGET: $(target_arch)

          #
          # Build
          #
          - script: just fix-ver
            displayName: Fix package version
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)

          - script: just build
            displayName: Build
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)

          #
          # Running all tests
          #
          - bash: just test
            displayName: Run tests
            condition: and(succeeded(), eq(variables['is_cross_compile'], false))
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)
              RUST_LOG: debug
              RUST_BACKTRACE: full

          #
          # Pack
          #
          - script: just pack-prepare
            displayName: Prepare to pack packages
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)

          - script: just pack-source
            displayName: Pack source files
            condition: and(succeeded(), eq(variables['target_os'], 'linux'), eq(variables['target_arch'], 'x86_64'))
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)

          - script: just pack-binary divoom-cli
            displayName: Pack divoom-cli binaries
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)
              BUILD_SIGNING_URL: $(BuildSigningURL)
              BUILD_SIGNING_VAULT_URL: $(BuildSigningVaultURL)
              BUILD_SIGNING_TENANT_ID: $(BuildSigningTenantId)
              BUILD_SIGNING_CLIENT_ID: $(BuildSigningClientId)
              BUILD_SIGNING_CLIENT_SECRET: $(BuildSigningClientSecret)
              BUILD_SIGNING_CERT_NAME: $(BuildSigningCertName)

          - script: just pack-symbols divoom-cli
            displayName: Pack divoom-cli symbols
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)

          - script: just pack-binary-zip divoom-cli
            displayName: Zip divoom-cli binaries
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)

          - script: just pack-nuget divoom-cli
            displayName: Pack divoom-cli nuget package
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)

          - script: just pack-msix divoom-cli
            displayName: Pack divoom-cli msix package
            condition: and(succeeded(), eq(variables['target_os'], 'windows'))
            env:
              BUILD_PROFILE: "release"
              BUILD_TARGET: $(target_arch)
              BUILD_SIGNING_URL: $(BuildSigningURL)
              BUILD_SIGNING_VAULT_URL: $(BuildSigningVaultURL)
              BUILD_SIGNING_TENANT_ID: $(BuildSigningTenantId)
              BUILD_SIGNING_CLIENT_ID: $(BuildSigningClientId)
              BUILD_SIGNING_CLIENT_SECRET: $(BuildSigningClientSecret)
              BUILD_SIGNING_CERT_NAME: $(BuildSigningCertName)